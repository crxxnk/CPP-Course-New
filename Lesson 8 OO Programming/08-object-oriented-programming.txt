What is Object-Oriented Programming?
* Procedural Programming
* Procedural Programming limitations
* OO Programming concepts and their advantages
* OO Programming limitations

Procedural Programming
* Focus is on processes or actions that a program takes
* Programs are typically a collection of functions
* Data is declared separately
* Data is passed as arguments into functions
* Fairly easy to learn

Procedural Programming - Limitations
* Functions need to know the structure of the data.
  * if the structure of the data changes, many functions must be changed

* As programs get larger they become more:
  * difficult to understand
  * difficult to maintain
  * difficult to extend
  * difficult to debug
  * difficult to reuse code
  * fragile and easier to break

What is Object-Oriented Programming?
* Classes and Objects
  * focus is on classes that model real-world domain entities
  * allows developers to think at a higher level of abstraction
  * used successfully in very large programs

* Encapsulation
  * objects contain data AND operations that work on that data
  * Abstract Data Type (ADT)

* Information-hiding
  * implementation-specific logic can be hidden
  * users of the class code to the interface since they don't need to know the implementation
  * more abstraction
  * easier to test, debug, maintain and extend

* Reusability
  * easier to reuse classes in other applications
  * faster development
  * higher quality

* Inheritance
  * can create new classes in term of existing classes
  * reusability
  * polymorphic classes

* Polymorphism and more...

Limitations

* Not a panacea
  * OO Programming won't make bad code better
  * not suitable for all types of problems
  * not everything decomposes to a class

* Learning curve
  * usually a steeper learning curve, especially for C++
  * many OO languages, many variations of OO concepts

* Design
  * usually more up-front design is necessary to create good models and hierarchies

* Programs can be:
  * larger in size
  * slower
  * more complex